<div class="refentry" title="glDrawElements"><a id="glDrawElements"></a><div class="titlepage"></div><div class="refnamediv"><h2>Name</h2><p>glDrawElements — render primitives from array data</p></div><div class="refsynopsisdiv" title="C Specification"><h2>C Specification</h2><div class="funcsynopsis"><table class="funcprototype-table"><tr><td><code class="funcdef">void <b class="fsfunc">glDrawElements</b>(</code></td><td>GLenum <var class="pdparam">mode</var>, </td></tr><tr><td> </td><td>GLsizei <var class="pdparam">count</var>, </td></tr><tr><td> </td><td>GLenum <var class="pdparam">type</var>, </td></tr><tr><td> </td><td>const GLvoid * <var class="pdparam">indices</var><code>)</code>;</td></tr></table><div class="funcprototype-spacer"> </div></div></div><div class="refsect1" title="Parameters"><a id="parameters"></a><h2>Parameters</h2><div class="variablelist"><dl><dt><span class="term">
                    <em class="parameter"><code>mode</code></em>
                </span></dt><dd><p>Specifies what kind of primitives to render.
                    Symbolic constants
                    <code class="constant">GL_POINTS</code>,
                    <code class="constant">GL_LINE_STRIP</code>,
                    <code class="constant">GL_LINE_LOOP</code>,
                    <code class="constant">GL_LINES</code>,
                    <code class="constant">GL_TRIANGLE_STRIP</code>,
                    <code class="constant">GL_TRIANGLE_FAN</code>, and
                    <code class="constant">GL_TRIANGLES</code> are accepted.</p></dd><dt><span class="term">
                    <em class="parameter"><code>count</code></em>
                </span></dt><dd><p>Specifies the number of elements to be rendered.</p></dd><dt><span class="term">
                    <em class="parameter"><code>type</code></em>
                </span></dt><dd><p>Specifies the type of the values in
                    <em class="parameter"><code>indices</code></em>. Must be either
                    <code class="constant">GL_UNSIGNED_BYTE</code> or
                    <code class="constant">GL_UNSIGNED_SHORT</code>.</p></dd><dt><span class="term">
                    <em class="parameter"><code>indices</code></em>
                </span></dt><dd><p>Specifies a pointer to the location where the
                    indices are stored.</p></dd></dl></div></div><div class="refsect1" title="Description"><a id="description"></a><h2>Description</h2><p>
        <code class="function">glDrawElements</code>

        specifies multiple geometric primitives with very few
        subroutine calls. You can prespecify separate arrays of
        vertices, normals, colors, and texture coordinates and use them
        to construct a sequence of primitives with a single call to
        <code class="function">glDrawElements</code>.</p><p>When <code class="function">glDrawElements</code> is called, it uses
        <em class="parameter"><code>count</code></em> sequential indices from
        <em class="parameter"><code>indices</code></em>
        to lookup elements in enabled arrays to construct a sequence of
        geometric primitives.
        <em class="parameter"><code>mode</code></em>
        specifies what kind of primitives are constructed, and how the
        array elements construct these primitives. If
        <code class="constant">GL_VERTEX_ARRAY</code>
        is not enabled, no geometric primitives are constructed.</p><p>Vertex attributes that are modified by
        <code class="function">glDrawElements</code> have an unspecified value after
        <code class="function">glDrawElements</code>
        returns. For example, if <code class="constant">GL_COLOR_ARRAY</code>
        is enabled, the value of the current color is undefined after
        <code class="function">glDrawElements</code>
        executes. Attributes that aren't modified maintain their
        previous values.</p></div><div class="refsect1" title="Errors"><a id="errors"></a><h2>Errors</h2><p><code class="constant">GL_INVALID_ENUM</code> is generated if
        <em class="parameter"><code>mode</code></em> is not an accepted value.</p><p><code class="constant">GL_INVALID_ENUM</code> is generated if
        <em class="parameter"><code>type</code></em> is not an accepted value.</p><p><code class="constant">GL_INVALID_VALUE</code> is generated if
        <em class="parameter"><code>count</code></em> is negative.</p></div><div class="refsect1" title="See Also"><a id="seealso"></a><h2>See Also</h2><p>
        <a class="citerefentry" href="glClientActiveTexture"><span class="citerefentry"><span class="refentrytitle">glClientActiveTexture</span></span></a>,
        <a class="citerefentry" href="glColorPointer"><span class="citerefentry"><span class="refentrytitle">glColorPointer</span></span></a>,
        <a class="citerefentry" href="glDrawArrays"><span class="citerefentry"><span class="refentrytitle">glDrawArrays</span></span></a>,
        <a class="citerefentry" href="glNormalPointer"><span class="citerefentry"><span class="refentrytitle">glNormalPointer</span></span></a>,
        <a class="citerefentry" href="glTexCoordPointer"><span class="citerefentry"><span class="refentrytitle">glTexCoordPointer</span></span></a>,
        <a class="citerefentry" href="glVertexPointer"><span class="citerefentry"><span class="refentrytitle">glVertexPointer</span></span></a> </p></div><div class="refsect1" title="Copyright"><a id="copyright"></a><h2>Copyright</h2><p>
            Copyright © 2003-2004
            Silicon Graphics, Inc. This document is licensed under the SGI
            Free Software B License. For details, see
            <a class="ulink" href="https://web.archive.org/web/20171022161616/http://oss.sgi.com/projects/FreeB/" target="_top">https://web.archive.org/web/20171022161616/http://oss.sgi.com/projects/FreeB/</a>.
        </p></div></div>
