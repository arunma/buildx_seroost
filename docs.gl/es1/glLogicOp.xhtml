<div class="refentry" title="glLogicOp"><a id="glLogicOp"></a><div class="titlepage"></div><div class="refnamediv"><h2>Name</h2><p>glLogicOp — specify a logical pixel operation</p></div><div class="refsynopsisdiv" title="C Specification"><h2>C Specification</h2><div class="funcsynopsis"><table class="funcprototype-table"><tr><td><code class="funcdef">void <b class="fsfunc">glLogicOp</b>(</code></td><td>GLenum <var class="pdparam">opcode</var><code>)</code>;</td></tr></table><div class="funcprototype-spacer"> </div></div></div><div class="refsect1" title="Parameters"><a id="parameters"></a><h2>Parameters</h2><div class="variablelist"><dl><dt><span class="term">
                    <em class="parameter"><code>opcode</code></em>
                </span></dt><dd><p>Specifies a symbolic constant that selects a
                    logical operation. The following symbols are accepted:
                    <code class="constant">GL_CLEAR</code>,
                    <code class="constant">GL_SET</code>,
                    <code class="constant">GL_COPY</code>,
                    <code class="constant">GL_COPY_INVERTED</code>,
                    <code class="constant">GL_NOOP</code>,
                    <code class="constant">GL_INVERT</code>,
                    <code class="constant">GL_AND</code>,
                    <code class="constant">GL_NAND</code>,
                    <code class="constant">GL_OR</code>,
                    <code class="constant">GL_NOR</code>,
                    <code class="constant">GL_XOR</code>,
                    <code class="constant">GL_EQUIV</code>,
                    <code class="constant">GL_AND_REVERSE</code>,
                    <code class="constant">GL_AND_INVERTED</code>,
                    <code class="constant">GL_OR_REVERSE</code>, and
                    <code class="constant">GL_OR_INVERTED</code>.  The initial value is
                    <code class="constant">GL_COPY</code>.</p></dd></dl></div></div><div class="refsect1" title="Description"><a id="description"></a><h2>Description</h2><p><code class="function">glLogicOp</code>
        specifies a logical operation that, when enabled, is applied
        between the incoming color and the color at the corresponding
        location in the frame buffer.
        To enable or disable the logical operation, call
        <a class="citerefentry" href="glEnable"><span class="citerefentry"><span class="refentrytitle">glEnable</span></span></a> and
        <a class="citerefentry" href="glDisable"><span class="citerefentry"><span class="refentrytitle">glDisable</span></span></a>
        with argument <code class="constant">GL_COLOR_LOGIC_OP</code>.
        Logical operation is initially disabled.
        </p><div class="informaltable"><table><colgroup><col /><col /></colgroup><thead><tr><th>Opcode</th><th class="center">Resulting Operation</th></tr></thead><tbody><tr><td><code class="constant">GL_CLEAR</code></td><td class="center">0</td></tr><tr><td><code class="constant">GL_SET</code></td><td class="center">1</td></tr><tr><td><code class="constant">GL_COPY</code></td><td class="center"><em class="replaceable"><code>s</code></em></td></tr><tr><td><code class="constant">GL_COPY_INVERTED</code></td><td class="center">
                            <math overflow="scroll">
                                <mo>~</mo><mi>s</mi>
                            </math>
                        </td></tr><tr><td><code class="constant">GL_NOOP</code></td><td class="center"><em class="replaceable"><code>d</code></em></td></tr><tr><td><code class="constant">GL_INVERT</code></td><td class="center">
                            <math overflow="scroll">
                                <mo>~</mo><mi>d</mi>
                            </math>
                        </td></tr><tr><td><code class="constant">GL_AND</code></td><td class="center">
                            <math overflow="scroll">
                                <mi>s</mi><mo>&amp;</mo><mi>d</mi>
                            </math>
                        </td></tr><tr><td><code class="constant">GL_NAND</code></td><td class="center">
                            <math overflow="scroll">
                                <mo>~</mo><mfenced><mrow><mi>s</mi><mo>&amp;</mo><mi>d</mi></mrow></mfenced>
                            </math>
                        </td></tr><tr><td><code class="constant">GL_OR</code></td><td class="center">
                            <math overflow="scroll">
                                <mi>s</mi><mo>|</mo><mi>d</mi>
                            </math>
                        </td></tr><tr><td><code class="constant">GL_NOR</code></td><td class="center">
                            <math overflow="scroll">
                                <mo>~</mo><mfenced><mrow><mi>s</mi><mo>|</mo><mi>d</mi></mrow></mfenced>
                            </math>
                        </td></tr><tr><td><code class="constant">GL_XOR</code></td><td class="center">
                            <math overflow="scroll">
                                <mi>s</mi><mo>^</mo><mi>d</mi>
                            </math>
                        </td></tr><tr><td><code class="constant">GL_EQUIV</code></td><td class="center">
                            <math overflow="scroll">
                                <mo>~</mo><mfenced><mrow><mi>s</mi><mo>^</mo><mi>d</mi></mrow></mfenced>
                            </math>
                        </td></tr><tr><td><code class="constant">GL_AND_REVERSE</code></td><td class="center">
                            <math overflow="scroll">
                                <mi>s</mi><mo>&amp;</mo><mo>~</mo><mi>d</mi>
                            </math>
                        </td></tr><tr><td><code class="constant">GL_AND_INVERTED</code></td><td class="center">
                            <math overflow="scroll">
                                <mo>~</mo><mi>s</mi><mo>&amp;</mo><mi>d</mi>
                            </math>
                        </td></tr><tr><td><code class="constant">GL_OR_REVERSE</code></td><td class="center">
                            <math overflow="scroll">
                                <mi>s</mi><mo>|</mo><mo>~</mo><mi>d</mi>
                            </math>
                        </td></tr><tr><td><code class="constant">GL_OR_INVERTED</code></td><td class="center">
                            <math overflow="scroll">
                                <mo>~</mo><mi>s</mi><mo>|</mo><mi>d</mi>
                            </math>
                        </td></tr></tbody></table></div><p>
        <em class="parameter"><code>opcode</code></em>
        is a symbolic constant chosen from the list above. In the
        explanation of the logical operations, <em class="parameter"><code>s</code></em>
        represents the incoming color and <em class="parameter"><code>d</code></em>
        represents the color in the frame buffer. Standard C-language
        operators are used. As these bitwise operators suggest, the
        logical operation is applied independently to each bit pair of
        the source and destination indices or colors.</p></div><div class="refsect1" title="Errors"><a id="errors"></a><h2>Errors</h2><p><code class="constant">GL_INVALID_ENUM</code> is generated if
        <em class="parameter"><code>opcode</code></em> is not an accepted value.</p></div><div class="refsect1" title="See Also"><a id="seealso"></a><h2>See Also</h2><p>
        <a class="citerefentry" href="glAlphaFunc"><span class="citerefentry"><span class="refentrytitle">glAlphaFunc</span></span></a>,
        <a class="citerefentry" href="glBlendFunc"><span class="citerefentry"><span class="refentrytitle">glBlendFunc</span></span></a>,
        <a class="citerefentry" href="glEnable"><span class="citerefentry"><span class="refentrytitle">glEnable</span></span></a>,
        <a class="citerefentry" href="glStencilOp"><span class="citerefentry"><span class="refentrytitle">glStencilOp</span></span></a>
        </p></div><div class="refsect1" title="Copyright"><a id="copyright"></a><h2>Copyright</h2><p>
            Copyright © 2003-2004
            Silicon Graphics, Inc. This document is licensed under the SGI
            Free Software B License. For details, see
            <a class="ulink" href="https://web.archive.org/web/20171022161616/http://oss.sgi.com/projects/FreeB/" target="_top">https://web.archive.org/web/20171022161616/http://oss.sgi.com/projects/FreeB/</a>.
        </p></div></div>
