<div class="refentry" lang="en" xml:lang="en"><a id="glRect"></a><div class="titlepage"></div><div class="refnamediv"><h2>Name</h2><p>glRect — draw a rectangle</p></div><div class="refsynopsisdiv"><h2>C Specification</h2><div class="funcsynopsis"><table><tr><td><code class="funcdef">void <b class="fsfunc">glRectd</b>(</code></td><td>GLdouble  </td><td><var class="pdparam">x1</var>, </td></tr><tr><td> </td><td>GLdouble  </td><td><var class="pdparam">y1</var>, </td></tr><tr><td> </td><td>GLdouble  </td><td><var class="pdparam">x2</var>, </td></tr><tr><td> </td><td>GLdouble  </td><td><var class="pdparam">y2</var><code>)</code>;</td></tr></table></div><div class="funcsynopsis"><table><tr><td><code class="funcdef">void <b class="fsfunc">glRectf</b>(</code></td><td>GLfloat  </td><td><var class="pdparam">x1</var>, </td></tr><tr><td> </td><td>GLfloat  </td><td><var class="pdparam">y1</var>, </td></tr><tr><td> </td><td>GLfloat  </td><td><var class="pdparam">x2</var>, </td></tr><tr><td> </td><td>GLfloat  </td><td><var class="pdparam">y2</var><code>)</code>;</td></tr></table></div><div class="funcsynopsis"><table><tr><td><code class="funcdef">void <b class="fsfunc">glRecti</b>(</code></td><td>GLint  </td><td><var class="pdparam">x1</var>, </td></tr><tr><td> </td><td>GLint  </td><td><var class="pdparam">y1</var>, </td></tr><tr><td> </td><td>GLint  </td><td><var class="pdparam">x2</var>, </td></tr><tr><td> </td><td>GLint  </td><td><var class="pdparam">y2</var><code>)</code>;</td></tr></table></div><div class="funcsynopsis"><table><tr><td><code class="funcdef">void <b class="fsfunc">glRects</b>(</code></td><td>GLshort  </td><td><var class="pdparam">x1</var>, </td></tr><tr><td> </td><td>GLshort  </td><td><var class="pdparam">y1</var>, </td></tr><tr><td> </td><td>GLshort  </td><td><var class="pdparam">x2</var>, </td></tr><tr><td> </td><td>GLshort  </td><td><var class="pdparam">y2</var><code>)</code>;</td></tr></table></div></div><div class="refsect1" lang="en" xml:lang="en"><a id="parameters"></a><h2>Parameters</h2><div class="variablelist"><dl><dt><span class="term"><em class="parameter"><code>x1</code></em>, </span><span class="term"><em class="parameter"><code>y1</code></em></span></dt><dd><p>
                    Specify one vertex of a rectangle.
                </p></dd><dt><span class="term"><em class="parameter"><code>x2</code></em>, </span><span class="term"><em class="parameter"><code>y2</code></em></span></dt><dd><p>
                    Specify the opposite vertex of the rectangle.
                </p></dd></dl></div></div><div class="refsynopsisdiv"><h2>C Specification</h2><div class="funcsynopsis"><table><tr><td><code class="funcdef">void <b class="fsfunc">glRectdv</b>(</code></td><td>const GLdouble *  </td><td><var class="pdparam">v1</var>, </td></tr><tr><td> </td><td>const GLdouble *  </td><td><var class="pdparam">v2</var><code>)</code>;</td></tr></table></div><div class="funcsynopsis"><table><tr><td><code class="funcdef">void <b class="fsfunc">glRectfv</b>(</code></td><td>const GLfloat *  </td><td><var class="pdparam">v1</var>, </td></tr><tr><td> </td><td>const GLfloat *  </td><td><var class="pdparam">v2</var><code>)</code>;</td></tr></table></div><div class="funcsynopsis"><table><tr><td><code class="funcdef">void <b class="fsfunc">glRectiv</b>(</code></td><td>const GLint *  </td><td><var class="pdparam">v1</var>, </td></tr><tr><td> </td><td>const GLint *  </td><td><var class="pdparam">v2</var><code>)</code>;</td></tr></table></div><div class="funcsynopsis"><table><tr><td><code class="funcdef">void <b class="fsfunc">glRectsv</b>(</code></td><td>const GLshort *  </td><td><var class="pdparam">v1</var>, </td></tr><tr><td> </td><td>const GLshort *  </td><td><var class="pdparam">v2</var><code>)</code>;</td></tr></table></div></div><div class="refsect1" lang="en" xml:lang="en"><a id="parameters2"></a><h2>Parameters</h2><div class="variablelist"><dl><dt><span class="term"><em class="parameter"><code>v1</code></em></span></dt><dd><p>
                    Specifies a pointer to one vertex of a rectangle.
                </p></dd><dt><span class="term"><em class="parameter"><code>v2</code></em></span></dt><dd><p>
                    Specifies a pointer to the opposite vertex of the rectangle.
                </p></dd></dl></div></div><div class="refsect1" lang="en" xml:lang="en"><a id="description"></a><h2>Description</h2><p>
            <code class="function">glRect</code> supports efficient specification of rectangles as two corner points.
            Each
            rectangle command takes four arguments,
            organized either as two consecutive pairs of
            <math overflow="scroll">

                <mfenced open="(" close=")">
                    <mi mathvariant="italic">x</mi>
                    <mi mathvariant="italic">y</mi>
                </mfenced>
            </math>
            coordinates
            or as two pointers to arrays,
            each containing an
            <math overflow="scroll">

                <mfenced open="(" close=")">
                    <mi mathvariant="italic">x</mi>
                    <mi mathvariant="italic">y</mi>
                </mfenced>
            </math>
            pair.
            The resulting rectangle is defined in the
            <math overflow="scroll">

                <mrow>
                    <mi mathvariant="italic">z</mi>
                    <mo>=</mo>
                    <mn>0</mn>
                </mrow>
            </math>
            plane.
        </p><p>
            <code class="function">glRect</code>(<em class="parameter"><code>x1</code></em>, <em class="parameter"><code>y1</code></em>, <em class="parameter"><code>x2</code></em>, <em class="parameter"><code>y2</code></em>)
            is exactly equivalent to the following sequence:
            </p><pre class="programlisting">
glBegin(<code class="constant">GL_POLYGON</code>);
glVertex2(<em class="parameter"><code>x1</code></em>, <em class="parameter"><code>y1</code></em>);
glVertex2(<em class="parameter"><code>x2</code></em>, <em class="parameter"><code>y1</code></em>);
glVertex2(<em class="parameter"><code>x2</code></em>, <em class="parameter"><code>y2</code></em>);
glVertex2(<em class="parameter"><code>x1</code></em>, <em class="parameter"><code>y2</code></em>);
glEnd();
            </pre><p>
            Note that if the second vertex is above and to the right of the first vertex,
            the rectangle is constructed with a counterclockwise winding.
        </p></div><div class="refsect1" lang="en" xml:lang="en"><a id="errors"></a><h2>Errors</h2><p>
            <code class="constant">GL_INVALID_OPERATION</code> is generated if <code class="function">glRect</code>
            is executed between the execution of <a class="citerefentry" href="glBegin"><span class="citerefentry"><span class="refentrytitle">glBegin</span></span></a>
            and the corresponding execution of <a class="citerefentry" href="glEnd"><span class="citerefentry"><span class="refentrytitle">glEnd</span></span></a>.
        </p></div>
        {$pipelinestall}{$examples}
        <div class="refsect1" lang="en" xml:lang="en"><a id="seealso"></a><h2>See Also</h2><p>
            <a class="citerefentry" href="glBegin"><span class="citerefentry"><span class="refentrytitle">glBegin</span></span></a>,
            <a class="citerefentry" href="glVertex"><span class="citerefentry"><span class="refentrytitle">glVertex</span></span></a>
        </p></div><div class="refsect1" lang="en" xml:lang="en"><div id="Copyright"><h2>Copyright</h2><p>
            Copyright © 1991-2006
            Silicon Graphics, Inc. This document is licensed under the SGI
            Free Software B License. For details, see
            <a class="ulink" href="https://web.archive.org/web/20171022161616/http://oss.sgi.com/projects/FreeB/" target="_top">https://web.archive.org/web/20171022161616/http://oss.sgi.com/projects/FreeB/</a>.
        </p></div></div></div>
