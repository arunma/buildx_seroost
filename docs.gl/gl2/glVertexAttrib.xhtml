<div class="refentry" lang="en" xml:lang="en"><a id="glVertexAttrib"></a><div class="titlepage"></div><div class="refnamediv"><h2>Name</h2><p>glVertexAttrib — Specifies the value of a generic vertex attribute</p></div><div class="refsynopsisdiv"><h2>C Specification</h2><div class="funcsynopsis"><table style="padding-bottom: 1em"><tr><td><code class="funcdef">void <b class="fsfunc">glVertexAttrib1f</b>(</code></td><td>GLuint  </td><td><var class="pdparam">index</var>, </td></tr><tr><td> </td><td>GLfloat  </td><td><var class="pdparam">v0</var><code>)</code>;</td></tr></table><table style="padding-bottom: 1em"><tr><td><code class="funcdef">void <b class="fsfunc">glVertexAttrib1s</b>(</code></td><td>GLuint  </td><td><var class="pdparam">index</var>, </td></tr><tr><td> </td><td>GLshort  </td><td><var class="pdparam">v0</var><code>)</code>;</td></tr></table><table style="padding-bottom: 1em"><tr><td><code class="funcdef">void <b class="fsfunc">glVertexAttrib1d</b>(</code></td><td>GLuint  </td><td><var class="pdparam">index</var>, </td></tr><tr><td> </td><td>GLdouble  </td><td><var class="pdparam">v0</var><code>)</code>;</td></tr></table><table style="padding-bottom: 1em"><tr><td><code class="funcdef">void <b class="fsfunc">glVertexAttrib2f</b>(</code></td><td>GLuint  </td><td><var class="pdparam">index</var>, </td></tr><tr><td> </td><td>GLfloat  </td><td><var class="pdparam">v0</var>, </td></tr><tr><td> </td><td>GLfloat  </td><td><var class="pdparam">v1</var><code>)</code>;</td></tr></table><table style="padding-bottom: 1em"><tr><td><code class="funcdef">void <b class="fsfunc">glVertexAttrib2s</b>(</code></td><td>GLuint  </td><td><var class="pdparam">index</var>, </td></tr><tr><td> </td><td>GLshort  </td><td><var class="pdparam">v0</var>, </td></tr><tr><td> </td><td>GLshort  </td><td><var class="pdparam">v1</var><code>)</code>;</td></tr></table><table style="padding-bottom: 1em"><tr><td><code class="funcdef">void <b class="fsfunc">glVertexAttrib2d</b>(</code></td><td>GLuint  </td><td><var class="pdparam">index</var>, </td></tr><tr><td> </td><td>GLdouble  </td><td><var class="pdparam">v0</var>, </td></tr><tr><td> </td><td>GLdouble  </td><td><var class="pdparam">v1</var><code>)</code>;</td></tr></table><table style="padding-bottom: 1em"><tr><td><code class="funcdef">void <b class="fsfunc">glVertexAttrib3f</b>(</code></td><td>GLuint  </td><td><var class="pdparam">index</var>, </td></tr><tr><td> </td><td>GLfloat  </td><td><var class="pdparam">v0</var>, </td></tr><tr><td> </td><td>GLfloat  </td><td><var class="pdparam">v1</var>, </td></tr><tr><td> </td><td>GLfloat  </td><td><var class="pdparam">v2</var><code>)</code>;</td></tr></table><table style="padding-bottom: 1em"><tr><td><code class="funcdef">void <b class="fsfunc">glVertexAttrib3s</b>(</code></td><td>GLuint  </td><td><var class="pdparam">index</var>, </td></tr><tr><td> </td><td>GLshort  </td><td><var class="pdparam">v0</var>, </td></tr><tr><td> </td><td>GLshort  </td><td><var class="pdparam">v1</var>, </td></tr><tr><td> </td><td>GLshort  </td><td><var class="pdparam">v2</var><code>)</code>;</td></tr></table><table style="padding-bottom: 1em"><tr><td><code class="funcdef">void <b class="fsfunc">glVertexAttrib3d</b>(</code></td><td>GLuint  </td><td><var class="pdparam">index</var>, </td></tr><tr><td> </td><td>GLdouble  </td><td><var class="pdparam">v0</var>, </td></tr><tr><td> </td><td>GLdouble  </td><td><var class="pdparam">v1</var>, </td></tr><tr><td> </td><td>GLdouble  </td><td><var class="pdparam">v2</var><code>)</code>;</td></tr></table><table style="padding-bottom: 1em"><tr><td><code class="funcdef">void <b class="fsfunc">glVertexAttrib4f</b>(</code></td><td>GLuint  </td><td><var class="pdparam">index</var>, </td></tr><tr><td> </td><td>GLfloat  </td><td><var class="pdparam">v0</var>, </td></tr><tr><td> </td><td>GLfloat  </td><td><var class="pdparam">v1</var>, </td></tr><tr><td> </td><td>GLfloat  </td><td><var class="pdparam">v2</var>, </td></tr><tr><td> </td><td>GLfloat  </td><td><var class="pdparam">v3</var><code>)</code>;</td></tr></table><table style="padding-bottom: 1em"><tr><td><code class="funcdef">void <b class="fsfunc">glVertexAttrib4s</b>(</code></td><td>GLuint  </td><td><var class="pdparam">index</var>, </td></tr><tr><td> </td><td>GLshort  </td><td><var class="pdparam">v0</var>, </td></tr><tr><td> </td><td>GLshort  </td><td><var class="pdparam">v1</var>, </td></tr><tr><td> </td><td>GLshort  </td><td><var class="pdparam">v2</var>, </td></tr><tr><td> </td><td>GLshort  </td><td><var class="pdparam">v3</var><code>)</code>;</td></tr></table><table style="padding-bottom: 1em"><tr><td><code class="funcdef">void <b class="fsfunc">glVertexAttrib4d</b>(</code></td><td>GLuint  </td><td><var class="pdparam">index</var>, </td></tr><tr><td> </td><td>GLdouble  </td><td><var class="pdparam">v0</var>, </td></tr><tr><td> </td><td>GLdouble  </td><td><var class="pdparam">v1</var>, </td></tr><tr><td> </td><td>GLdouble  </td><td><var class="pdparam">v2</var>, </td></tr><tr><td> </td><td>GLdouble  </td><td><var class="pdparam">v3</var><code>)</code>;</td></tr></table><table><tr><td><code class="funcdef">void <b class="fsfunc">glVertexAttrib4Nub</b>(</code></td><td>GLuint  </td><td><var class="pdparam">index</var>, </td></tr><tr><td> </td><td>GLubyte  </td><td><var class="pdparam">v0</var>, </td></tr><tr><td> </td><td>GLubyte  </td><td><var class="pdparam">v1</var>, </td></tr><tr><td> </td><td>GLubyte  </td><td><var class="pdparam">v2</var>, </td></tr><tr><td> </td><td>GLubyte  </td><td><var class="pdparam">v3</var><code>)</code>;</td></tr></table></div></div><div class="refsect1" lang="en" xml:lang="en"><a id="parameters"></a><h2>Parameters</h2><div class="variablelist"><dl><dt><span class="term"><em class="parameter"><code>index</code></em></span></dt><dd><p>Specifies the index of the generic vertex
		    attribute to be modified.</p></dd><dt><span class="term">
		    <em class="parameter"><code>v0</code></em>,
		    <em class="parameter"><code>v1</code></em>,
		    <em class="parameter"><code>v2</code></em>,
		    <em class="parameter"><code>v3</code></em>
		</span></dt><dd><p>Specifies the new values to be used for the
		    specified vertex attribute.</p></dd></dl></div></div><div class="refsynopsisdiv"><h2>C Specification</h2><div class="funcsynopsis"><table style="padding-bottom: 1em"><tr><td><code class="funcdef">void <b class="fsfunc">glVertexAttrib1fv</b>(</code></td><td>GLuint  </td><td><var class="pdparam">index</var>, </td></tr><tr><td> </td><td>const GLfloat * </td><td><var class="pdparam">v</var><code>)</code>;</td></tr></table><table style="padding-bottom: 1em"><tr><td><code class="funcdef">void <b class="fsfunc">glVertexAttrib1sv</b>(</code></td><td>GLuint  </td><td><var class="pdparam">index</var>, </td></tr><tr><td> </td><td>const GLshort * </td><td><var class="pdparam">v</var><code>)</code>;</td></tr></table><table style="padding-bottom: 1em"><tr><td><code class="funcdef">void <b class="fsfunc">glVertexAttrib1dv</b>(</code></td><td>GLuint  </td><td><var class="pdparam">index</var>, </td></tr><tr><td> </td><td>const GLdouble * </td><td><var class="pdparam">v</var><code>)</code>;</td></tr></table><table style="padding-bottom: 1em"><tr><td><code class="funcdef">void <b class="fsfunc">glVertexAttrib2fv</b>(</code></td><td>GLuint  </td><td><var class="pdparam">index</var>, </td></tr><tr><td> </td><td>const GLfloat * </td><td><var class="pdparam">v</var><code>)</code>;</td></tr></table><table style="padding-bottom: 1em"><tr><td><code class="funcdef">void <b class="fsfunc">glVertexAttrib2sv</b>(</code></td><td>GLuint  </td><td><var class="pdparam">index</var>, </td></tr><tr><td> </td><td>const GLshort * </td><td><var class="pdparam">v</var><code>)</code>;</td></tr></table><table style="padding-bottom: 1em"><tr><td><code class="funcdef">void <b class="fsfunc">glVertexAttrib2dv</b>(</code></td><td>GLuint  </td><td><var class="pdparam">index</var>, </td></tr><tr><td> </td><td>const GLdouble * </td><td><var class="pdparam">v</var><code>)</code>;</td></tr></table><table style="padding-bottom: 1em"><tr><td><code class="funcdef">void <b class="fsfunc">glVertexAttrib3fv</b>(</code></td><td>GLuint  </td><td><var class="pdparam">index</var>, </td></tr><tr><td> </td><td>const GLfloat * </td><td><var class="pdparam">v</var><code>)</code>;</td></tr></table><table style="padding-bottom: 1em"><tr><td><code class="funcdef">void <b class="fsfunc">glVertexAttrib3sv</b>(</code></td><td>GLuint  </td><td><var class="pdparam">index</var>, </td></tr><tr><td> </td><td>const GLshort * </td><td><var class="pdparam">v</var><code>)</code>;</td></tr></table><table style="padding-bottom: 1em"><tr><td><code class="funcdef">void <b class="fsfunc">glVertexAttrib3dv</b>(</code></td><td>GLuint  </td><td><var class="pdparam">index</var>, </td></tr><tr><td> </td><td>const GLdouble * </td><td><var class="pdparam">v</var><code>)</code>;</td></tr></table><table style="padding-bottom: 1em"><tr><td><code class="funcdef">void <b class="fsfunc">glVertexAttrib4fv</b>(</code></td><td>GLuint  </td><td><var class="pdparam">index</var>, </td></tr><tr><td> </td><td>const GLfloat * </td><td><var class="pdparam">v</var><code>)</code>;</td></tr></table><table style="padding-bottom: 1em"><tr><td><code class="funcdef">void <b class="fsfunc">glVertexAttrib4sv</b>(</code></td><td>GLuint  </td><td><var class="pdparam">index</var>, </td></tr><tr><td> </td><td>const GLshort * </td><td><var class="pdparam">v</var><code>)</code>;</td></tr></table><table style="padding-bottom: 1em"><tr><td><code class="funcdef">void <b class="fsfunc">glVertexAttrib4dv</b>(</code></td><td>GLuint  </td><td><var class="pdparam">index</var>, </td></tr><tr><td> </td><td>const GLdouble * </td><td><var class="pdparam">v</var><code>)</code>;</td></tr></table><table style="padding-bottom: 1em"><tr><td><code class="funcdef">void <b class="fsfunc">glVertexAttrib4iv</b>(</code></td><td>GLuint  </td><td><var class="pdparam">index</var>, </td></tr><tr><td> </td><td>const GLint * </td><td><var class="pdparam">v</var><code>)</code>;</td></tr></table><table style="padding-bottom: 1em"><tr><td><code class="funcdef">void <b class="fsfunc">glVertexAttrib4bv</b>(</code></td><td>GLuint  </td><td><var class="pdparam">index</var>, </td></tr><tr><td> </td><td>const GLbyte * </td><td><var class="pdparam">v</var><code>)</code>;</td></tr></table><table style="padding-bottom: 1em"><tr><td><code class="funcdef">void <b class="fsfunc">glVertexAttrib4ubv</b>(</code></td><td>GLuint  </td><td><var class="pdparam">index</var>, </td></tr><tr><td> </td><td>const GLubyte * </td><td><var class="pdparam">v</var><code>)</code>;</td></tr></table><table style="padding-bottom: 1em"><tr><td><code class="funcdef">void <b class="fsfunc">glVertexAttrib4usv</b>(</code></td><td>GLuint  </td><td><var class="pdparam">index</var>, </td></tr><tr><td> </td><td>const GLushort * </td><td><var class="pdparam">v</var><code>)</code>;</td></tr></table><table style="padding-bottom: 1em"><tr><td><code class="funcdef">void <b class="fsfunc">glVertexAttrib4uiv</b>(</code></td><td>GLuint  </td><td><var class="pdparam">index</var>, </td></tr><tr><td> </td><td>const GLuint * </td><td><var class="pdparam">v</var><code>)</code>;</td></tr></table><table style="padding-bottom: 1em"><tr><td><code class="funcdef">void <b class="fsfunc">glVertexAttrib4Nbv</b>(</code></td><td>GLuint  </td><td><var class="pdparam">index</var>, </td></tr><tr><td> </td><td>const GLbyte * </td><td><var class="pdparam">v</var><code>)</code>;</td></tr></table><table style="padding-bottom: 1em"><tr><td><code class="funcdef">void <b class="fsfunc">glVertexAttrib4Nsv</b>(</code></td><td>GLuint  </td><td><var class="pdparam">index</var>, </td></tr><tr><td> </td><td>const GLshort * </td><td><var class="pdparam">v</var><code>)</code>;</td></tr></table><table style="padding-bottom: 1em"><tr><td><code class="funcdef">void <b class="fsfunc">glVertexAttrib4Niv</b>(</code></td><td>GLuint  </td><td><var class="pdparam">index</var>, </td></tr><tr><td> </td><td>const GLint * </td><td><var class="pdparam">v</var><code>)</code>;</td></tr></table><table style="padding-bottom: 1em"><tr><td><code class="funcdef">void <b class="fsfunc">glVertexAttrib4Nubv</b>(</code></td><td>GLuint  </td><td><var class="pdparam">index</var>, </td></tr><tr><td> </td><td>const GLubyte * </td><td><var class="pdparam">v</var><code>)</code>;</td></tr></table><table style="padding-bottom: 1em"><tr><td><code class="funcdef">void <b class="fsfunc">glVertexAttrib4Nusv</b>(</code></td><td>GLuint  </td><td><var class="pdparam">index</var>, </td></tr><tr><td> </td><td>const GLushort * </td><td><var class="pdparam">v</var><code>)</code>;</td></tr></table><table><tr><td><code class="funcdef">void <b class="fsfunc">glVertexAttrib4Nuiv</b>(</code></td><td>GLuint  </td><td><var class="pdparam">index</var>, </td></tr><tr><td> </td><td>const GLuint * </td><td><var class="pdparam">v</var><code>)</code>;</td></tr></table></div></div><div class="refsect1" lang="en" xml:lang="en"><a id="parameters2"></a><h2>Parameters</h2><div class="variablelist"><dl><dt><span class="term"><em class="parameter"><code>index</code></em></span></dt><dd><p>Specifies the index of the generic vertex
		    attribute to be modified.</p></dd><dt><span class="term"><em class="parameter"><code>v</code></em></span></dt><dd><p>Specifies a pointer to an array of values to
		    be used for the generic vertex attribute.</p></dd></dl></div></div><div class="refsect1" lang="en" xml:lang="en"><a id="description"></a><h2>Description</h2><p>OpenGL defines a number of standard vertex attributes that
	applications can modify with standard API entry points (color,
	normal, texture coordinates, etc.). The
	<code class="function">glVertexAttrib</code> family of entry points
	allows an application to pass generic vertex attributes in
	numbered locations.</p><p>Generic attributes are defined as four-component values
	that are organized into an array. The first entry of this array
	is numbered 0, and the size of the array is specified by the
	implementation-dependent constant
	<code class="constant">GL_MAX_VERTEX_ATTRIBS</code>. Individual elements
	of this array can be modified with a
	<code class="function">glVertexAttrib</code> call that specifies the
	index of the element to be modified and a value for that
	element.</p><p>These commands can be used to specify one, two, three, or
	all four components of the generic vertex attribute specified by
	<em class="parameter"><code>index</code></em>. A <code class="function">1</code> in the
	name of the command indicates that only one value is passed, and
	it will be used to modify the first component of the generic
	vertex attribute. The second and third components will be set to
	0, and the fourth component will be set to 1. Similarly, a
	<code class="function">2</code> in the name of the command indicates that
	values are provided for the first two components, the third
	component will be set to 0, and the fourth component will be set
	to 1. A <code class="function">3</code> in the name of the command
	indicates that values are provided for the first three
	components and the fourth component will be set to 1, whereas a
	<code class="function">4</code> in the name indicates that values are
	provided for all four components.</p><p>The letters <code class="function">s</code>,
	<code class="function">f</code>, <code class="function">i</code>,
	<code class="function">d</code>, <code class="function">ub</code>,
	<code class="function">us</code>, and <code class="function">ui</code> indicate
	whether the arguments are of type short, float, int, double,
	unsigned byte, unsigned short, or unsigned int. When
	<code class="function">v</code> is appended to the name, the commands can
	take a pointer to an array of such values. The commands
	containing <code class="function">N</code> indicate that the arguments
	will be passed as fixed-point values that are scaled to a
	normalized range according to the component conversion rules
	defined by the OpenGL specification. Signed values are
	understood to represent fixed-point values in the range [-1,1],
	and unsigned values are understood to represent fixed-point
	values in the range [0,1].</p><p>OpenGL Shading Language attribute variables are allowed to
	be of type mat2, mat3, or mat4. Attributes of these types may be
	loaded using the <code class="function">glVertexAttrib</code> entry
	points. Matrices must be loaded into successive generic
	attribute slots in column major order, with one column of the
	matrix in each generic attribute slot.</p><p>A user-defined attribute variable declared in a vertex
	shader can be bound to a generic attribute index by calling
	<a class="citerefentry" href="glBindAttribLocation"><span class="citerefentry"><span class="refentrytitle">glBindAttribLocation</span></span></a>.
	This allows an application to use more descriptive variable
	names in a vertex shader. A subsequent change to the specified
	generic vertex attribute will be immediately reflected as a
	change to the corresponding attribute variable in the vertex
	shader.</p><p>The binding between a generic vertex attribute index and a
	user-defined attribute variable in a vertex shader is part of
	the state of a program object, but the current value of the
	generic vertex attribute is not. The value of each generic
	vertex attribute is part of current state, just like standard
	vertex attributes, and it is maintained even if a different
	program object is used.</p><p>An application may freely modify generic vertex attributes
	that are not bound to a named vertex shader attribute variable.
	These values are simply maintained as part of current state and
	will not be accessed by the vertex shader. If a generic vertex
	attribute bound to an attribute variable in a vertex shader is
	not updated while the vertex shader is executing, the vertex
	shader will repeatedly use the current value for the generic
	vertex attribute.</p><p>The generic vertex attribute with index 0 is the same as
	the vertex position attribute previously defined by OpenGL. A
	<a class="citerefentry" href="glVertex2"><span class="citerefentry"><span class="refentrytitle">glVertex2</span></span></a>,
	<a class="citerefentry" href="glVertex3"><span class="citerefentry"><span class="refentrytitle">glVertex3</span></span></a>,
	or
	<a class="citerefentry" href="glVertex4"><span class="citerefentry"><span class="refentrytitle">glVertex4</span></span></a>
	command is completely equivalent to the corresponding
	<code class="function">glVertexAttrib</code> command with an index
	argument of 0. A vertex shader can access generic vertex
	attribute 0 by using the built-in attribute variable
	<em class="parameter"><code>gl_Vertex</code></em>. There are no current values
	for generic vertex attribute 0. This is the only generic vertex
	attribute with this property; calls to set other standard vertex
	attributes can be freely mixed with calls to set any of the
	other generic vertex attributes.</p></div><div class="refsect1" lang="en" xml:lang="en"><a id="notes"></a><h2>Notes</h2><p><code class="function">glVertexAttrib</code> is available only if
	the GL version is 2.0 or greater.</p><p>Generic vertex attributes can be updated at any time. In
	particular, <code class="function">glVertexAttrib</code> can be called
	between a call to
	<a class="citerefentry" href="glBegin"><span class="citerefentry"><span class="refentrytitle">glBegin</span></span></a>
	and the corresponding call to
	<a class="citerefentry" href="glEnd"><span class="citerefentry"><span class="refentrytitle">glEnd</span></span></a>.</p><p>It is possible for an application to bind more than one
	attribute name to the same generic vertex attribute index. This
	is referred to as aliasing, and it is allowed only if just one
	of the aliased attribute variables is active in the vertex
	shader, or if no path through the vertex shader consumes more
	than one of the attributes aliased to the same location. OpenGL
	implementations are not required to do error checking to detect
	aliasing, they are allowed to assume that aliasing will not
	occur, and they are allowed to employ optimizations that work
	only in the absence of aliasing.</p><p>There is no provision for binding standard vertex
	attributes; therefore, it is not possible to alias generic
	attributes with standard attributes.</p></div><div class="refsect1" lang="en" xml:lang="en"><a id="errors"></a><h2>Errors</h2><p><code class="constant">GL_INVALID_VALUE</code> is generated if
	<em class="parameter"><code>index</code></em> is greater than or equal to
	<code class="constant">GL_MAX_VERTEX_ATTRIBS</code>.</p></div><div class="refsect1" lang="en" xml:lang="en"><a id="associatedgets"></a><h2>Associated Gets</h2><p><a class="citerefentry" href="glGet"><span class="citerefentry"><span class="refentrytitle">glGet</span></span></a>
	with the argument <code class="constant">GL_CURRENT_PROGRAM</code></p><p><a class="citerefentry" href="glGetActiveAttrib"><span class="citerefentry"><span class="refentrytitle">glGetActiveAttrib</span></span></a>
	with argument <em class="parameter"><code>program</code></em> and the index of an active
	attribute variable</p><p><a class="citerefentry" href="glGetAttribLocation"><span class="citerefentry"><span class="refentrytitle">glGetAttribLocation</span></span></a>
	with argument <em class="parameter"><code>program</code></em> and an attribute
	variable name</p><p><a class="citerefentry" href="glGetVertexAttrib"><span class="citerefentry"><span class="refentrytitle">glGetVertexAttrib</span></span></a>
	with arguments <code class="constant">GL_CURRENT_VERTEX_ATTRIB</code> and
	<em class="parameter"><code>index</code></em></p></div>
        {$pipelinestall}{$examples}
        <div class="refsect1" lang="en" xml:lang="en"><a id="seealso"></a><h2>See Also</h2><p><a class="citerefentry" href="glBindAttribLocation"><span class="citerefentry"><span class="refentrytitle">glBindAttribLocation</span></span></a>,
	<a class="citerefentry" href="glVertex"><span class="citerefentry"><span class="refentrytitle">glVertex</span></span></a>,
	<a class="citerefentry" href="glVertexAttribPointer"><span class="citerefentry"><span class="refentrytitle">glVertexAttribPointer</span></span></a></p></div><div class="refsect1" lang="en" xml:lang="en"><div id="Copyright"><h2>Copyright</h2><p>
            Copyright © 2003-2005 3Dlabs Inc. Ltd.
            This material may be distributed subject to the terms and conditions set forth in
            the Open Publication License, v 1.0, 8 June 1999.
            <a class="ulink" href="https://opencontent.org/openpub/" target="_top">https://opencontent.org/openpub/</a>.
        </p></div></div></div>
