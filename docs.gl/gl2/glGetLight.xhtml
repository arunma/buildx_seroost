<div class="refentry" lang="en" xml:lang="en"><a id="glGetLight"></a><div class="titlepage"></div><div class="refnamediv"><h2>Name</h2><p>glGetLight — return light source parameter values</p></div><div class="refsynopsisdiv"><h2>C Specification</h2><div class="funcsynopsis"><table><tr><td><code class="funcdef">void <b class="fsfunc">glGetLightfv</b>(</code></td><td>GLenum  </td><td><var class="pdparam">light</var>, </td></tr><tr><td> </td><td>GLenum  </td><td><var class="pdparam">pname</var>, </td></tr><tr><td> </td><td>GLfloat *  </td><td><var class="pdparam">params</var><code>)</code>;</td></tr></table></div><div class="funcsynopsis"><table><tr><td><code class="funcdef">void <b class="fsfunc">glGetLightiv</b>(</code></td><td>GLenum  </td><td><var class="pdparam">light</var>, </td></tr><tr><td> </td><td>GLenum  </td><td><var class="pdparam">pname</var>, </td></tr><tr><td> </td><td>GLint *  </td><td><var class="pdparam">params</var><code>)</code>;</td></tr></table></div></div><div class="refsect1" lang="en" xml:lang="en"><a id="parameters"></a><h2>Parameters</h2><div class="variablelist"><dl><dt><span class="term"><em class="parameter"><code>light</code></em></span></dt><dd><p>
                    Specifies a light source.
                    The number of possible lights depends on the implementation,
                    but at least eight lights are supported.
                    They are identified by symbolic names of the form <code class="constant">GL_LIGHT</code>
                    <math overflow="scroll"><mi mathvariant="italic">i</mi></math>
                    where
                    <math overflow="scroll"><mi mathvariant="italic">i</mi></math>
                    ranges from 0 to the value of <code class="constant">GL_MAX_LIGHTS</code> - 1.
                </p></dd><dt><span class="term"><em class="parameter"><code>pname</code></em></span></dt><dd><p>
                    Specifies a light source parameter for <em class="parameter"><code>light</code></em>.
                    Accepted symbolic names are
                    <code class="constant">GL_AMBIENT</code>,
                    <code class="constant">GL_DIFFUSE</code>,
                    <code class="constant">GL_SPECULAR</code>,
                    <code class="constant">GL_POSITION</code>,
                    <code class="constant">GL_SPOT_DIRECTION</code>,
                    <code class="constant">GL_SPOT_EXPONENT</code>,
                    <code class="constant">GL_SPOT_CUTOFF</code>,
                    <code class="constant">GL_CONSTANT_ATTENUATION</code>,
                    <code class="constant">GL_LINEAR_ATTENUATION</code>, and
                    <code class="constant">GL_QUADRATIC_ATTENUATION</code>.
                </p></dd><dt><span class="term"><em class="parameter"><code>params</code></em></span></dt><dd><p>
                    Returns the requested data.
                </p></dd></dl></div></div><div class="refsect1" lang="en" xml:lang="en"><a id="description"></a><h2>Description</h2><p>
            <code class="function">glGetLight</code> returns in <em class="parameter"><code>params</code></em> the value or values of a light source parameter.
            <em class="parameter"><code>light</code></em> names the light and is a symbolic name of the form <code class="constant">GL_LIGHT</code>
            <math overflow="scroll"><mi mathvariant="italic">i</mi></math>
            where i ranges from 0 to the value of <code class="constant">GL_MAX_LIGHTS</code> - 1.
            <code class="constant">GL_MAX_LIGHTS</code> is an implementation dependent constant that is
            greater than or equal to eight.
            <em class="parameter"><code>pname</code></em> specifies one of ten light source parameters,
            again by symbolic name.
        </p><p>
            The following parameters are defined:
        </p><div class="variablelist"><dl><dt><span class="term"><code class="constant">GL_AMBIENT</code></span></dt><dd><p>
                        <em class="parameter"><code>params</code></em> returns four integer or floating-point values representing the
                        ambient intensity of the light source.
                        Integer values,
                        when requested,
                        are linearly mapped from the internal floating-point representation
                        such that 1.0 maps to the most positive representable integer value,
                        and
                        <math overflow="scroll">

                            <mn>-1.0</mn>
                        </math>
                        maps to the most negative representable integer value.
                        If the internal value is outside the range
                        <math overflow="scroll">

                            <mfenced open="[" close="]">
                                <mn>-1</mn>
                                <mn>1</mn>
                            </mfenced>
                        </math>,
                        the corresponding integer return value is undefined. The initial value is
                        (0, 0, 0, 1).
                    </p></dd><dt><span class="term"><code class="constant">GL_DIFFUSE</code></span></dt><dd><p>
                        <em class="parameter"><code>params</code></em> returns four integer or floating-point values representing the
                        diffuse intensity of the light source.
                        Integer values,
                        when requested,
                        are linearly mapped from the internal floating-point representation
                        such that 1.0 maps to the most positive representable integer value,
                        and
                        <math overflow="scroll">

                            <mn>-1.0</mn>
                        </math>
                        maps to the most negative representable integer value.
                        If the internal value is outside the range
                        <math overflow="scroll">

                            <mfenced open="[" close="]">
                                <mn>-1</mn>
                                <mn>1</mn>
                            </mfenced>
                        </math>,
                        the corresponding integer return value is undefined. The initial value
                        for <code class="constant">GL_LIGHT0</code> is (1, 1, 1, 1); for other lights, the
                        initial value is (0, 0, 0, 0).
                    </p></dd><dt><span class="term"><code class="constant">GL_SPECULAR</code></span></dt><dd><p>
                        <em class="parameter"><code>params</code></em> returns four integer or floating-point values representing the
                        specular intensity of the light source.
                        Integer values,
                        when requested,
                        are linearly mapped from the internal floating-point representation
                        such that 1.0 maps to the most positive representable integer value,
                        and
                        <math overflow="scroll">

                            <mn>-1.0</mn>
                        </math>
                        maps to the most negative representable integer value.
                        If the internal value is outside the range
                        <math overflow="scroll">

                            <mfenced open="[" close="]">
                                <mn>-1</mn>
                                <mn>1</mn>
                            </mfenced>
                        </math>,
                        the corresponding integer return value is undefined. The initial value
                        for <code class="constant">GL_LIGHT0</code> is (1, 1, 1, 1); for other lights, the
                        initial value is (0, 0, 0, 0).
                    </p></dd><dt><span class="term"><code class="constant">GL_POSITION</code></span></dt><dd><p>
                        <em class="parameter"><code>params</code></em> returns four integer or floating-point values representing the
                        position of the light source.
                        Integer values,
                        when requested,
                        are computed by rounding the internal floating-point values to the
                        nearest integer value.
                        The returned values are those maintained in eye coordinates.
                        They will not be equal to the values specified using <a class="citerefentry" href="glLight"><span class="citerefentry"><span class="refentrytitle">glLight</span></span></a>,
                        unless the modelview matrix was identity at the time <a class="citerefentry" href="glLight"><span class="citerefentry"><span class="refentrytitle">glLight</span></span></a> was
                        called. The initial value is (0, 0, 1, 0).
                    </p></dd><dt><span class="term"><code class="constant">GL_SPOT_DIRECTION</code></span></dt><dd><p>
                        <em class="parameter"><code>params</code></em> returns three integer or floating-point values representing the
                        direction of the light source.
                        Integer values,
                        when requested,
                        are computed by rounding the internal floating-point values to the
                        nearest integer value.
                        The returned values are those maintained in eye coordinates.
                        They will not be equal to the values specified using <a class="citerefentry" href="glLight"><span class="citerefentry"><span class="refentrytitle">glLight</span></span></a>,
                        unless the modelview matrix was identity at the time <a class="citerefentry" href="glLight"><span class="citerefentry"><span class="refentrytitle">glLight</span></span></a> was called.
                        Although spot direction is normalized before being used in the lighting
                        equation,
                        the returned values are the transformed versions of the specified values
                        prior to normalization. The initial value is
                        <math overflow="scroll">

                            <mfenced open="(" close=")">
                                <mn>0</mn>
                                <mn>0</mn>
                                <mn>-1</mn>
                            </mfenced>
                        </math>.
                    </p></dd><dt><span class="term"><code class="constant">GL_SPOT_EXPONENT</code></span></dt><dd><p>
                        <em class="parameter"><code>params</code></em> returns a single integer or floating-point value representing the
                        spot exponent of the light.
                        An integer value,
                        when requested,
                        is computed by rounding the internal floating-point representation to
                        the nearest integer. The initial value is 0.
                    </p></dd><dt><span class="term"><code class="constant">GL_SPOT_CUTOFF</code></span></dt><dd><p>
                        <em class="parameter"><code>params</code></em> returns a single integer or floating-point value representing the
                        spot cutoff angle of the light.
                        An integer value,
                        when requested,
                        is computed by rounding the internal floating-point representation to
                        the nearest integer. The initial value is 180.
                    </p></dd><dt><span class="term"><code class="constant">GL_CONSTANT_ATTENUATION</code></span></dt><dd><p>
                        <em class="parameter"><code>params</code></em> returns a single integer or floating-point value representing the
                        constant (not distance-related) attenuation of the light.
                        An integer value,
                        when requested,
                        is computed by rounding the internal floating-point representation to
                        the nearest integer. The initial value is 1.
                    </p></dd><dt><span class="term"><code class="constant">GL_LINEAR_ATTENUATION</code></span></dt><dd><p>
                        <em class="parameter"><code>params</code></em> returns a single integer or floating-point value representing the
                        linear attenuation of the light.
                        An integer value,
                        when requested,
                        is computed by rounding the internal floating-point representation to
                        the nearest integer. The initial value is 0.
                    </p></dd><dt><span class="term"><code class="constant">GL_QUADRATIC_ATTENUATION</code></span></dt><dd><p>
                        <em class="parameter"><code>params</code></em> returns a single integer or floating-point value representing the
                        quadratic attenuation of the light.
                        An integer value,
                        when requested,
                        is computed by rounding the internal floating-point representation to
                        the nearest integer. The initial value is 0.
                    </p></dd></dl></div></div><div class="refsect1" lang="en" xml:lang="en"><a id="notes"></a><h2>Notes</h2><p>
            It is always the case that <code class="constant">GL_LIGHT</code>
            <math overflow="scroll"><mi mathvariant="italic">i</mi></math>
            = <code class="constant">GL_LIGHT0</code> +
            <math overflow="scroll"><mi mathvariant="italic">i</mi></math>.
        </p><p>
            If an error is generated,
            no change is made to the contents of <em class="parameter"><code>params</code></em>.
        </p></div><div class="refsect1" lang="en" xml:lang="en"><a id="errors"></a><h2>Errors</h2><p>
            <code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>light</code></em> or <em class="parameter"><code>pname</code></em> is not an
            accepted value.
        </p><p>
            <code class="constant">GL_INVALID_OPERATION</code> is generated if <code class="function">glGetLight</code>
            is executed between the execution of <a class="citerefentry" href="glBegin"><span class="citerefentry"><span class="refentrytitle">glBegin</span></span></a>
            and the corresponding execution of <a class="citerefentry" href="glEnd"><span class="citerefentry"><span class="refentrytitle">glEnd</span></span></a>.
        </p></div>
        {$pipelinestall}{$examples}
        <div class="refsect1" lang="en" xml:lang="en"><a id="seealso"></a><h2>See Also</h2><p>
            <a class="citerefentry" href="glLight"><span class="citerefentry"><span class="refentrytitle">glLight</span></span></a>
        </p></div><div class="refsect1" lang="en" xml:lang="en"><div id="Copyright"><h2>Copyright</h2><p>
            Copyright © 1991-2006
            Silicon Graphics, Inc. This document is licensed under the SGI
            Free Software B License. For details, see
            <a class="ulink" href="https://web.archive.org/web/20171022161616/http://oss.sgi.com/projects/FreeB/" target="_top">https://web.archive.org/web/20171022161616/http://oss.sgi.com/projects/FreeB/</a>.
        </p></div></div></div>
