<div class="refentry"><a id="glCopyTexSubImage2D"></a><div class="titlepage"></div><div class="refnamediv"><h2>Name</h2><p>glCopyTexSubImage2D — copy a two-dimensional texture subimage</p></div><div class="refsynopsisdiv"><h2>C Specification</h2><div class="funcsynopsis"><table class="funcprototype-table" style="cellspacing: 0; cellpadding: 0;"><tr><td><code class="funcdef">void <strong class="fsfunc">glCopyTexSubImage2D</strong>(</code></td><td>GLenum <var class="pdparam">target</var>, </td></tr><tr><td> </td><td>GLint <var class="pdparam">level</var>, </td></tr><tr><td> </td><td>GLint <var class="pdparam">xoffset</var>, </td></tr><tr><td> </td><td>GLint <var class="pdparam">yoffset</var>, </td></tr><tr><td> </td><td>GLint <var class="pdparam">x</var>, </td></tr><tr><td> </td><td>GLint <var class="pdparam">y</var>, </td></tr><tr><td> </td><td>GLsizei <var class="pdparam">width</var>, </td></tr><tr><td> </td><td>GLsizei <var class="pdparam">height</var><code>)</code>;</td></tr></table><div class="funcprototype-spacer"> </div></div></div><p>
    </p><div class="refsect1"><a id="parameters"></a><h2>Parameters</h2><div class="variablelist"><dl class="variablelist"><dt><span class="term"><em class="parameter"><code>target</code></em></span></dt><dd><p>
                    Specifies the target texture of the active texture unit.
                    Must be <code class="constant">GL_TEXTURE_2D</code>,
                    <code class="constant">GL_TEXTURE_CUBE_MAP_POSITIVE_X</code>,
                    <code class="constant">GL_TEXTURE_CUBE_MAP_NEGATIVE_X</code>,
                    <code class="constant">GL_TEXTURE_CUBE_MAP_POSITIVE_Y</code>,
                    <code class="constant">GL_TEXTURE_CUBE_MAP_NEGATIVE_Y</code>,
                    <code class="constant">GL_TEXTURE_CUBE_MAP_POSITIVE_Z</code>, or
                    <code class="constant">GL_TEXTURE_CUBE_MAP_NEGATIVE_Z</code>.
                </p></dd><dt><span class="term"><em class="parameter"><code>level</code></em></span></dt><dd><p>
                    Specifies the level-of-detail number.
                    Level 0 is the base image level.
                    Level <span class="emphasis"><em>n</em></span> is the <span class="emphasis"><em>n</em></span>th mipmap reduction image.
                </p></dd><dt><span class="term"><em class="parameter"><code>xoffset</code></em></span></dt><dd><p>
                    Specifies a texel offset in the x direction within the texture array.
                </p></dd><dt><span class="term"><em class="parameter"><code>yoffset</code></em></span></dt><dd><p>
                    Specifies a texel offset in the y direction within the texture array.
                </p></dd><dt><span class="term"><em class="parameter"><code>x</code></em>, </span><span class="term"><em class="parameter"><code>y</code></em></span></dt><dd><p>
                    Specify the window coordinates of the lower left corner
                    of the rectangular region of pixels to be copied.
                </p></dd><dt><span class="term"><em class="parameter"><code>width</code></em></span></dt><dd><p>
                    Specifies the width of the texture subimage.
                </p></dd><dt><span class="term"><em class="parameter"><code>height</code></em></span></dt><dd><p>
                    Specifies the height of the texture subimage.
                </p></dd></dl></div></div><div class="refsect1"><a id="description"></a><h2>Description</h2><p>
            Texturing maps a portion of a specified texture image
            onto each graphical primitive for which texturing is
            active.  Texturing is active when the current fragment shader or
            vertex shader makes use of built-in texture lookup
            functions.
        </p><p>
            <code class="function">glCopyTexSubImage2D</code> replaces a rectangular portion of a two-dimensional texture image or
            cube-map texture image with pixels from the current framebuffer
            (rather than from client memory, as is the case for <a class="citerefentry" href="glTexSubImage2D"><span class="citerefentry"><span class="refentrytitle">glTexSubImage2D</span></span></a>).
        </p><p>
            The screen-aligned pixel rectangle with lower left corner at
            <math overflow="scroll">

                <mfenced open="(" close=")">
                    <mi mathvariant="italic">x</mi>
                    <mi mathvariant="italic">y</mi>
                </mfenced>
            </math>
            and with
            width <em class="parameter"><code>width</code></em> and height <em class="parameter"><code>height</code></em> replaces the portion of the
            texture array with x indices <em class="parameter"><code>xoffset</code></em> through
            <math overflow="scroll">

                <mrow>
                    <mi mathvariant="italic">xoffset</mi>
                    <mo>+</mo>
                    <mi mathvariant="italic">width</mi>
                    <mo>-</mo>
                    <mn>1</mn>
                </mrow>
            </math>,
            inclusive, and y indices <em class="parameter"><code>yoffset</code></em> through
            <math overflow="scroll">

                <mrow>
                    <mi mathvariant="italic">yoffset</mi>
                    <mo>+</mo>
                    <mi mathvariant="italic">height</mi>
                    <mo>-</mo>
                    <mn>1</mn>
                </mrow>
            </math>,
            inclusive, at the mipmap level specified by <em class="parameter"><code>level</code></em>.
        </p><p>
            The pixels in the rectangle are processed exactly as if
            <a class="citerefentry" href="glReadPixels"><span class="citerefentry"><span class="refentrytitle">glReadPixels</span></span></a> had been called with
            <em class="parameter"><code>format</code></em> set to <code class="constant">GL_RGBA</code>, but the process stops just after
            conversion of RGBA values. Subsequent processing is identical to that
            described for <a class="citerefentry" href="glTexSubImage2D"><span class="citerefentry"><span class="refentrytitle">glTexSubImage2D</span></span></a>,
            beginning with the clamping of the R, G, B, and A values to the range
            <math overflow="scroll">

                <mfenced open="[" close="]">
                    <mn>0</mn>
                    <mn>1</mn>
                </mfenced>
            </math>
            and then conversion to the texture's internal format for storage in the texel
            array.
        </p><p>
            The destination rectangle in the texture array may not include any texels
            outside the texture array as it was originally specified.
            It is not an error to specify a subtexture with zero width or height, but
            such a specification has no effect.
        </p><p>
            If any of the pixels within the specified rectangle are outside the framebuffer associated with the current
            rendering context, then the values obtained for those pixels are undefined.
        </p><p>
            No change is made to the <span class="emphasis"><em>internalformat</em></span>, <span class="emphasis"><em>width</em></span>, or
            <span class="emphasis"><em>height</em></span> parameters of the specified texture
            array or to texel values outside the specified subregion.
        </p></div><div class="refsect1"><a id="notes"></a><h2>Notes</h2><p>
            <code class="function">glCopyTexSubImage2D</code>
            specifies the two-dimensional or cube-map texture for the current texture unit,
            specified with <a class="citerefentry" href="glActiveTexture"><span class="citerefentry"><span class="refentrytitle">glActiveTexture</span></span></a>.
        </p></div><div class="refsect1"><a id="errors"></a><h2>Errors</h2><p>
            <code class="constant">GL_INVALID_ENUM</code> is generated if <em class="parameter"><code>target</code></em> is not <code class="constant">GL_TEXTURE_2D</code>,
            <code class="constant">GL_TEXTURE_CUBE_MAP_POSITIVE_X</code>,
            <code class="constant">GL_TEXTURE_CUBE_MAP_NEGATIVE_X</code>,
            <code class="constant">GL_TEXTURE_CUBE_MAP_POSITIVE_Y</code>,
            <code class="constant">GL_TEXTURE_CUBE_MAP_NEGATIVE_Y</code>,
            <code class="constant">GL_TEXTURE_CUBE_MAP_POSITIVE_Z</code>, or
            <code class="constant">GL_TEXTURE_CUBE_MAP_NEGATIVE_Z</code>.
        </p><p>
            <code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>level</code></em> is less than 0.
        </p><p>
            <code class="constant">GL_INVALID_VALUE</code> may be generated if
            <math overflow="scroll">

                <mrow>
                    <mi mathvariant="italic">level</mi>
                    <mo>&gt;</mo>
                    <mrow>
                        <msub><mi mathvariant="italic">log</mi>
                        <mn>2</mn>
                        </msub>
                        <mo>⁡</mo>
                        <mfenced open="(" close=")">
                            <mi mathvariant="italic">max</mi>
                        </mfenced>
                    </mrow>
                </mrow>
            </math>,
            where
            <math overflow="scroll"><mi mathvariant="italic">max</mi></math>
            is the returned value of <code class="constant">GL_MAX_TEXTURE_SIZE</code>.
        </p><p>
            <code class="constant">GL_INVALID_VALUE</code> is generated if
            <math overflow="scroll">

                <mrow>
                    <mi mathvariant="italic">xoffset</mi>
                    <mo>&lt;</mo>
                    <mn>0</mn>
                </mrow>
            </math>,
            <math overflow="scroll">

                <mrow>
                    <mfenced open="(" close=")">
                        <mrow>
                            <mi mathvariant="italic">xoffset</mi>
                            <mo>+</mo>
                            <mi mathvariant="italic">width</mi>
                        </mrow>
                    </mfenced>
                    <mo>&gt;</mo>
                    <mi mathvariant="italic">w</mi>
                </mrow>
            </math>,
            <math overflow="scroll">

                <mrow>
                    <mi mathvariant="italic">yoffset</mi>
                    <mo>&lt;</mo>
                    <mn>0</mn>
                </mrow>
            </math>,
            or
            <math overflow="scroll">

                <mrow>
                    <mfenced open="(" close=")">
                        <mrow>
                            <mi mathvariant="italic">yoffset</mi>
                            <mo>+</mo>
                            <mi mathvariant="italic">height</mi>
                        </mrow>
                    </mfenced>
                    <mo>&gt;</mo>
                    <mi mathvariant="italic">h</mi>
                </mrow>
            </math>,
            where
            <math overflow="scroll"><mi mathvariant="italic">w</mi></math>
            is the width and
            <math overflow="scroll"><mi mathvariant="italic">h</mi></math>
            is the height of the texture image being modified.
        </p><p>
            <code class="constant">GL_INVALID_VALUE</code> is generated if <em class="parameter"><code>width</code></em> or <em class="parameter"><code>height</code></em> is less than 0.
        </p><p>
            <code class="constant">GL_INVALID_OPERATION</code> is generated if the texture array has not been
            defined by a previous <a class="citerefentry" href="glTexImage2D"><span class="citerefentry"><span class="refentrytitle">glTexImage2D</span></span></a> or <a class="citerefentry" href="glCopyTexImage2D"><span class="citerefentry"><span class="refentrytitle">glCopyTexImage2D</span></span></a> operation.
        </p><p>
            <code class="constant">GL_INVALID_OPERATION</code> is generated if
            the currently bound framebuffer's format does not contain a superset of
            the components required by the texture's base internal format.
        </p><p>
            <code class="constant">GL_INVALID_FRAMEBUFFER_OPERATION</code> is generated if
            the currently bound framebuffer is not framebuffer complete (i.e. the
            return value from <a class="citerefentry" href="glCheckFramebufferStatus"><span class="citerefentry"><span class="refentrytitle">glCheckFramebufferStatus</span></span></a>
            is not <code class="constant">GL_FRAMEBUFFER_COMPLETE</code>).
        </p></div><div class="refsect1"><a id="associatedgets"></a><h2>Associated Gets</h2><p>
            <a class="citerefentry" href="glGet"><span class="citerefentry"><span class="refentrytitle">glGet</span></span></a>
            with argument <code class="constant">GL_MAX_TEXTURE_SIZE</code> or
            <code class="constant">GL_MAX_CUBE_MAP_TEXTURE_SIZE</code>
        </p></div>
        {$pipelinestall}{$examples}
        <div class="refsect1"><a id="seealso"></a><h2>See Also</h2><p>
            <a class="citerefentry" href="glActiveTexture"><span class="citerefentry"><span class="refentrytitle">glActiveTexture</span></span></a>,
            <a class="citerefentry" href="glCheckFramebufferStatus"><span class="citerefentry"><span class="refentrytitle">glCheckFramebufferStatus</span></span></a>,
            <a class="citerefentry" href="glCopyTexImage2D"><span class="citerefentry"><span class="refentrytitle">glCopyTexImage2D</span></span></a>,
            <a class="citerefentry" href="glTexImage2D"><span class="citerefentry"><span class="refentrytitle">glTexImage2D</span></span></a>,
            <a class="citerefentry" href="glTexParameter"><span class="citerefentry"><span class="refentrytitle">glTexParameter</span></span></a>,
            <a class="citerefentry" href="glTexSubImage2D"><span class="citerefentry"><span class="refentrytitle">glTexSubImage2D</span></span></a>
        </p></div><div class="refsect1"><div id="Copyright"><h2>Copyright</h2><p>
            Copyright © 1991-2006
            Silicon Graphics, Inc. This document is licensed under the SGI
            Free Software B License. For details, see
            <a class="ulink" href="https://web.archive.org/web/20171022161616/http://oss.sgi.com/projects/FreeB/" target="_top">https://web.archive.org/web/20171022161616/http://oss.sgi.com/projects/FreeB/</a>.
        </p></div></div></div>
